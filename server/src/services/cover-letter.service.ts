import { Types } from 'mongoose';
import { GenerateCoverLetterRequest, CoverLetterResponse } from '../types/cover-letter.types';
import { CoverLetter, ICoverLetter } from '../models/cover-letter.model';
import { openai } from '../config/openai';

interface PDFOptions {
  title: string;
  content: string;
  metadata: {
    author: string;
    keywords: string[];
    subject: string;
  };
}

export class CoverLetterService {
  private async generateWithAI(
    jobDescription: string,
    keyPoints: string[] = [],
    resumeHighlights: string = '',
    companyName: string = '',
    position: string = ''
  ): Promise<string> {
    try {
      const prompt = `
Please generate a professional cover letter for the following job description:

Job Description:
${jobDescription}

${keyPoints.length > 0 ? `Key Points to Emphasize:
${keyPoints.join('\n')}` : ''}

${resumeHighlights ? `Relevant Experience Highlights:
${resumeHighlights}` : ''}

${companyName ? `Company: ${companyName}` : ''}
${position ? `Position: ${position}` : ''}

Please generate a complete cover letter following these guidelines.`;

      const response = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "You are a professional cover letter writer with expertise in crafting compelling and tailored cover letters."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 1000
      });

      return response.choices[0]?.message?.content || '';
    } catch (error) {
      console.error('Error generating cover letter:', error);
      throw new Error('Failed to generate cover letter');
    }
  }

  async generateCoverLetter(
    request: GenerateCoverLetterRequest,
    userId: Types.ObjectId
  ): Promise<CoverLetterResponse> {
    const content = await this.generateWithAI(
      request.jobDescription,
      request.keyPoints,
      '',
      request.companyName,
      request.position
    );

    const coverLetter = await CoverLetter.create({
      userId,
      content,
      jobTitle: request.position,
      company: request.companyName,
      version: 1,
      isEnhanced: false
    });

    return this.mapToResponse(coverLetter, request);
  }

  async getCoverLettersByUserId(userId: Types.ObjectId): Promise<CoverLetterResponse[]> {
    try {
      const coverLetters = await CoverLetter.find({ userId });
      return coverLetters.map(letter => this.mapToResponse(letter));
    } catch (error) {
      throw new Error('Failed to fetch cover letters');
    }
  }

  private mapToResponse(coverLetter: ICoverLetter, request?: GenerateCoverLetterRequest): CoverLetterResponse {
    const id = coverLetter._id;
    if (!id) {
      throw new Error('Cover letter document is missing _id');
    }

    return {
      id: id.toString(),
      content: coverLetter.content,
      metadata: {
        jobDescription: request?.jobDescription || '',
        keyPoints: request?.keyPoints || [],
        companyName: coverLetter.company || '',
        position: coverLetter.jobTitle || '',
        createdAt: coverLetter.createdAt.toISOString()
      }
    };
  }

  async enhanceCoverLetter(content: string, context?: any) {
    try {
      const prompt = `
        Enhance the following cover letter to make it more professional and impactful.
        Make sure to maintain the key points while improving the language and tone.
        
        Original cover letter:
        ${content}
        
        Additional context:
        ${JSON.stringify(context || {})}
      `;

      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "You are a professional cover letter writer with expertise in creating compelling and effective cover letters."
          },
          {
            role: "user",
            content: prompt
          }
        ]
      });

      return completion.choices[0]?.message?.content || content;
    } catch (error) {
      console.error('Error enhancing cover letter:', error);
      throw new Error('Failed to enhance cover letter');
    }
  }

  async generatePDF(options: PDFOptions): Promise<Buffer> {
    try {
      // For now, we'll return a simple text buffer
      // TODO: Implement proper PDF generation
      const content = `
        ${options.title}
        
        ${options.content}
        
        Generated by JobAI
      `;
      
      return Buffer.from(content);
    } catch (error) {
      console.error('Error generating PDF:', error);
      throw new Error('Failed to generate PDF');
    }
  }
} 